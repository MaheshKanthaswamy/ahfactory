@import "../foundation/scss/foundation";
@import "../variables";
@import "flex-box";

/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
    $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
    $blur: nth(1.5 3 10 14 19, $depth) * 4px;
    $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

    @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
    $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
    $blur: nth(1 3 3 5 6, $depth) * 4px;
    $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

    @return 0 $primary-offset $blur $color;
}

/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
@mixin card($depth) {
    @if $depth < 1 {
        box-shadow: none;
    }
    @else if $depth > 5 {
        @warn "Invalid $depth `#{$depth}` for mixin `card`.";
    }
    @else {
        box-shadow: bottom-shadow($depth), top-shadow($depth);
    }
}

@mixin flex-custom {
    @include display(flex);
}

@mixin flex-align-center {
    @include justify-content(center);
    @include align-items(center);
}

@mixin flex-1-1-0 {
    @include flex-bourbon(1 1 auto);
}

@mixin browser($browsers: Mozilla) {
    @each $browser in $browsers {
        html[data-browser*="#{$browser}"] & {
            @content;
        }
    }
}

/**
 * Fix for vw, vh, vmin, vmax on iOS 7.
 * http://caniuse.com/#feat=viewport-units
 *
 * This fix works by replacing viewport units with px values on known screen sizes.
 *
 * iPhone 6 and 6 Plus cannot run iOS 7, so are not targeted by this fix.
 * Target devices running iOS 8+ will incidentally execute the media query,
 * but this will still produce the expected result; so this is not a problem.
 *
 * As an example, replace:
 *
 *   height: 50vh;
 *   font-size: 5vmin;
 *
 * with:
 *
 *   @include viewport-unit(height, 50vh);
 *   @include viewport-unit(font-size, 5vmin);
 */
@mixin viewport-unit($property, $value) {
    #{$property}: $value;

    $unit: unit($value);

    @if (index((vw, vh, vmin, vmax), $unit) != null) {
        $devices: ( (768px, 1024px), // iPad (all versions)
        (320px, 480px), // iPhone 4
        (320px, 568px) // iPhone 5, 5C, 5S
        );

        @each $device in $devices {
            $device-width: nth($device, 1);
            $device-height: nth($device, 2);

            $device-query: "only screen and (-webkit-min-device-pixel-ratio: 1)";
            $device-query: "#{$device-query} and (device-width: #{$device-width})";
            $device-query: "#{$device-query} and (device-height: #{$device-height})";

            $percent: $value / ($value * 0 + 1); // see https://github.com/sass/sass/issues/533

            $percent-width: $device-width * $percent / 100;
            $percent-height: $device-height * $percent / 100;

            @if ($unit == vmin or $unit == vmax) {
                @media #{$device-query} {
                    #{$property}: if($unit == vmin, $percent-width, $percent-height);
                }
            }
            @else {
                @media #{$device-query} and (orientation: portrait) {
                    #{$property}: if($unit == vw, $percent-width, $percent-height);
                }

                @media #{$device-query} and (orientation: landscape) {
                    #{$property}: if($unit == vw, $percent-height, $percent-width);
                }
            }
        }
    }
}

@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }

    @-moz-keyframes #{$animation-name} {
        @content;
    }

    @-ms-keyframes #{$animation-name} {
        @content;
    }

    @-o-keyframes #{$animation-name} {
        @content;
    }

    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
    -webkit-animation: #{$str};
    -moz-animation: #{$str};
    -ms-animation: #{$str};
    -o-animation: #{$str};
    animation: #{$str};
}

@include keyframes(fadeInUp) {
    0% {
        opacity: 0;
        -moz-transform: translate3d(0, $global-margin*3, 0);
        -ms-transform: translate3d(0, $global-margin*3, 0);
        -o-transform: translate3d(0, $global-margin*3, 0);
        -webkit-transform: translate3d(0, $global-margin*3, 0);
        transform: translate3d(0, $global-margin*3, 0);
    }

    90% {
        opacity: 1;
        -moz-transform: translateY(0);
        -ms-transform: translateY(0);
        -o-transform: translateY(0);
        -webkit-transform: translateY(0);
        transform: translateY(0);
    }
}
